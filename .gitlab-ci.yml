stages:
  - test-auth
  - test-sh
  - zip
  - terraform-apply
  - deploy 

.id_tokens:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com

get-credentials:
  extends: .id_tokens
  image: google/cloud-sdk:slim
  stage: test-auth
  script:
    - apt-get update && apt-get install -y jq
    - echo $GITLAB_OIDC_TOKEN | cut -d '.' -f2 | base64 --decode | jq . || true
    - echo ${GITLAB_OIDC_TOKEN} > .ci_job_jwt_file
    - echo "Created .ci_job_jwt_file"
    - cat .ci_job_jwt_file
    - echo "Contents of .ci_job_jwt_file"
    - gcloud iam workload-identity-pools create-cred-config ${GCP_WORKLOAD_IDENTITY_PROVIDER}
      --service-account="${GCP_SERVICE_ACCOUNT}"
      --output-file=.gcp_temp_cred.json
      --credential-source-file=.ci_job_jwt_file
    - echo "Created credential configuration file"
    - cat .gcp_temp_cred.json
    - echo "Contents of credential configuration file"
    - gcloud auth login --cred-file=`pwd`/.gcp_temp_cred.json --verbosity=debug
    - echo "Logged into Google Cloud"
    - gcloud auth list
    - echo "Auth List:"
  artifacts:
    paths:
      - .gcp_temp_cred.json
      - .ci_job_jwt_file
  
  
get-sh:
  extends: .id_tokens
  image: dwdraju/alpine-curl-jq
  stage: test-sh
  script:
    - echo "Checking if GITLAB_OIDC_TOKEN is set..."
    - if [ -z "$GITLAB_OIDC_TOKEN" ]; then echo "GITLAB_OIDC_TOKEN is EMPTY"; exit 1; else echo "GITLAB_OIDC_TOKEN is SET (but masked)"; fi
    - chmod +x infra/exchange_token.sh
    - ./infra/exchange_token.sh

zip-source-code:
  stage: zip
  image: google/cloud-sdk:latest
  dependencies:
    - get-credentials
  script:
    - apt-get update && apt-get install -y zip
    - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/.gcp_temp_cred.json"
    - gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS
    - echo "DB_USER=$DB_USER" > .env
    - echo "DB_PASSWORD=$DB_PASSWORD" >> .env
    - echo "DB_NAME=$DB_NAME" >> .env
    - echo "DB_HOST=$DB_HOST" >> .env
    - echo "SECRET_KEY=$SECRET_KEY" >> .env
    - cat .env
    - echo "Creating zip file"
    - ZIP_FILE_NAME="source_code.zip"
    - zip -r $ZIP_FILE_NAME . -x "*.git*" "*.DS_Store" "__pycache__/*"
    - gsutil cp $ZIP_FILE_NAME gs://cornhole-app-yaml/


terraform_apply:
  stage: terraform-apply
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  dependencies:
    - get-credentials
  script:
    - echo "Installing dependencies"
    - apk update && apk add --no-cache curl jq
    - echo "Using GCP cred for Terraform" 
    - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/.gcp_temp_cred.json"
    - cat .gcp_temp_cred.json 
    - cp .ci_job_jwt_file infra/
    - cd infra 
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  only:
    - master 


app-engine-deploy:
  stage: deploy 
  image: google/cloud-sdk:slim 
  dependencies:
    - get-credentials
    - zip-source-code
  script:
    - echo "Using GCP credentials"
    - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/.gcp_temp_cred.json"
    - gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS
    - gcloud config set project $GOOGLE_PROJECT_ID
    - echo "Downloading zipped source code"
    - gsutil cp gs://cornhole-app-yaml/source_code.zip .
    - unzip -l source_code.zip
    - unzip -o source_code.zip
    - echo "Deploying app to App Engine"
    - gcloud app deploy app.yaml --quiet
  only:
    - master






